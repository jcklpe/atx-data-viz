{"version":3,"names":[],"mappings":"","sources":["atx-data-pull.js"],"sourcesContent":["//- data data data data data\r\n\r\n//- function for updating charts\r\n\r\n\r\nconst endpoint = 'https://data.austintexas.gov/resource/7d8e-dm7r.json';\r\n\r\nconsole.log(endpoint);\r\n\r\nasync function requestDayCount(dayNum, type)\r\n{\r\n    //fetch the endpoint data\r\n    const response = await fetch(endpoint);\r\n\r\n    //convert the fetched data to json format\r\n    const rideInfo = await response.json();\r\n\r\n\r\n    //filter the array based on the day of the week number\r\n    let dayArray = rideInfo.filter(aRide => aRide.day_of_week == dayNum || aRide.vehicle_type == type);\r\n\r\n    //determine the number of days that are in the filtered array\r\n    return dayArray.length;\r\n    console.log(\"dayArray\");\r\n};\r\n\r\nconst mondayBikeRideCount = requestDayCount(1, \"bicycle\");\r\nconst tuesdayBikeRideCount = requestDayCount(2, \"bicycle\");\r\nconst wednesdayBikeRideCount = requestDayCount(3, \"bicycle\");\r\nconst thursdayBikeRideCount = requestDayCount(4, \"bicycle\");\r\nconst fridayBikeRideCount = requestDayCount(5, \"bicycle\");\r\nconst saturdayBikeRideCount = requestDayCount(6, \"bicycle\");\r\nconst sundayBikeRideCount = requestDayCount(7, \"bicycle\");\r\n\r\n\r\nconst mondayScooterRideCount = requestDayCount(1, \"scooter\");\r\nconst tuesdayScooterRideCount = requestDayCount(2, \"scooter\");\r\nconst wednesdayScooterRideCount = requestDayCount(3, \"scooter\");\r\nconst thursdayScooterRideCount = requestDayCount(4, \"scooter\");\r\nconst fridayScooterRideCount = requestDayCount(5, \"scooter\");\r\nconst saturdayScooterRideCount = requestDayCount(6, \"scooter\");\r\nconst sundayScooterRideCount = requestDayCount(7, \"scooter\");\r\n\r\n\r\n//NOTE: The below was my original solution to the above problem but I figured I should go ahead and learn proper modern syntax etc. Also I wasn't sure how well that delay would play with the chart graphs.\r\n\r\n//NOTE: Whew, I just finished the genericized version. Dang that took me awhile. Never done .then or async stuff. I'm glad I did because it's rewarding making stuff cleaner but yeesh is that thing finicky. I wish you could just save the returned value to a globally scoped variable instead of having to call .then each time. Apparently globally scoped await functions are on the way though so that's cool.\r\n// const rideInfoz = [];\r\n// fetch(endpoint)\r\n//     .then(blob => blob.json())\r\n//     .then(data => rideInfoz.push(...data));\r\n\r\n// setTimeout(function ()\r\n// {\r\n//     var mondayRides = rideInfoz.filter(aRide => aRide.day_of_week == 1);\r\n//     console.log(mondayRides);\r\n// }, 6000);\r\n\r\n\r\n\r\n\r\n//NOTE: this below is obviously the original get ajax GET operation supplied with the repo. I didn't end up using it because I was having trouble with scoping. And also I don't really know jQuery that well except for manipulating visuals. I've never used it much for manipulating data and it seems that it would be better to just keep learning esNext stuff.\r\n// $.ajax({\r\n//     url: \"https://data.austintexas.gov/resource/7d8e-dm7r.json\",\r\n//     type: \"GET\",\r\n//     data: {\r\n//         $limit: 5000\r\n//     }\r\n// }).done(function (data)\r\n// {\r\n//     console.log(data);"],"file":"atx-data-pull.min.js"}